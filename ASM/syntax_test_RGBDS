; SYNTAX TEST "RGBDS.sublime-syntax"


; Some comment
; <- comment.line.semi-colon.rgbds punctuation.definition.comment.begin.rgbds
;^^^^^^^^^^^^^ comment.line.semi-colon.rgbds

    ; Same but in SPAAAACE(s)
;   ^ punctuation.definition.comment.begin.rgbds
;   ^^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.semi-colon.rgbds

; Some comment; but not nested
;             ^ - punctuation.definition.comment.begin.rgbds

Local.AndExported::
; <- entity.name.local.exported.rgbds
;^^^^^^^^^^^^^^^^ entity.name.local.exported.rgbds
;    ^ punctuation.accessor.dot.rgbds
;                ^^ keyword.declaration.export.rgbds

.ExportedToo::
; <- entity.name.local.exported.rgbds punctuation.accessor.dot.rgbds
;^^^^^^^^^^^ entity.name.local.exported.rgbds
;           ^^ keyword.declaration.export.rgbds

    Local.AndWithSpaces::
;   ^^^^^^^^^^^^^^^^^^^ entity.name.local.exported.rgbds
;        ^ punctuation.accessor.dot.rgbds
;                      ^^ keyword.declaration.export.rgbds

    .YetMoreSpaces::
;   ^^^^^^^^^^^^^^ entity.name.local.exported.rgbds
;   ^ punctuation.accessor.dot.rgbds
;                 ^^ keyword.declaration.export.rgbds


LocalBut.NotExported:
; <- entity.name.local.rgbds
;^^^^^^^^^^^^^^^^^^^ entity.name.local.rgbds
;       ^ punctuation.accessor.dot.rgbds
;                   ^ keyword.declaration.rgbds

.NotExportedEither:
; <- entity.name.local.rgbds punctuation.accessor.dot.rgbds
;^^^^^^^^^^^^^^^^^ entity.name.local.rgbds
;                 ^ keyword.declaration.rgbds

    LocalBut.WithSpaces:
;   ^^^^^^^^^^^^^^^^^^^ entity.name.local.rgbds
;           ^ punctuation.accessor.dot.rgbds
;                      ^ keyword.declaration.rgbds

    .WithMoarSpaces:
;   ^^^^^^^^^^^^^^^ entity.name.local.rgbds
;   ^ punctuation.accessor.dot.rgbds
;                  ^ keyword.declaration.rgbds


NoColons.ButLocals
; <- entity.name.local.rgbds
;^^^^^^^^^^^^^^^^^ entity.name.local.rgbds
;       ^ punctuation.accessor.dot.rgbds

.WhoNeedsColonsWhenYouHaveLocals
; <- entity.name.local.rgbds punctuation.accessor.dot.rgbds
;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ entity.name.local.rgbds

    NoColons.ButDotsInSpace
;   ^^^^^^^^^^^^^^^^^^^^^^^ entity.name.local.rgbds
;           ^ punctuation.accessor.dot.rgbds

    .ForTheIndentedDot
;   ^^^^^^^^^^^^^^^^^^ entity.name.local.rgbds
;   ^ punctuation.accessor.dot.rgbds


Internal:
; <- entity.name.internal.rgbds
;^^^^^^^ entity.name.internal.rgbds
;       ^ keyword.declaration.rgbds

Deprecated
; <- meta.function-call.macro.rgbds variable.function.rgbds
;^^^^^^^^^ meta.function-call.macro.rgbds variable.function.rgbds


; Testing that consecutive label declarations work, even when separated by a comment...
AB:
CD:
; <- entity.name.internal.rgbds
;^ entity.name.internal.rgbds
; ^ keyword.declaration.rgbds

EF: ;
;   ^ comment.line.semi-colon.rgbds punctuation.definition.comment.begin.rgbds
GH:
; <- entity.name.internal.rgbds
;^ entity.name.internal.rgbds
; ^ keyword.declaration.rgbds


def hexadecimal equ $0123456789abcdefABCDEF
; <- keyword.declaration.def.rgbds
;^^ keyword.declaration.def.rgbds
;   ^^^^^^^^^^^ entity.name.constant.rgbds
;               ^^^ keyword.operator.assignment.rgbds
;                   ^^^ constant.numeric.integer.hexadecimal.rgbds
def decimal equ 0123456789
;   ^^^^^^^ entity.name.constant.rgbds
;           ^^^ keyword.operator.assignment.rgbds
;               ^ constant.numeric.integer.decimal.rgbds
def octal equ &01234567
;   ^^^^^ entity.name.constant.rgbds
;         ^^^ keyword.operator.assignment.rgbds
;             ^^^^^^^^^ constant.numeric.integer.octal.rgbds
def binary equ %01
;   ^^^^^^ entity.name.constant.rgbds
;          ^^^ keyword.operator.assignment.rgbds
;              ^^^ constant.numeric.integer.binary.rgbds
def fixed_point equ 0123456789.0123456789
;   ^^^^^^^^^^^ entity.name.constant.rgbds
;               ^^^ keyword.operator.assignment.rgbds
;                   ^^^^^^^^^^^^^^^^^^^^^ constant.numeric.float.decimal.rgbds
def character equ "*"
;   ^^^^^^^^^ entity.name.constant.rgbds
;             ^^^ keyword.operator.assignment.rgbds
;                 ^ punctuation.definition.string.begin.rgbds
;                 ^^^ string.quoted.double.rgbds
;                   ^ punctuation.definition.string.end.rgbds
def gfx equ `01230123
;   ^^^ entity.name.constant.rgbds
;       ^^^ keyword.operator.assignment.rgbds
;           ^^^^^^^^^ constant.numeric.integer.other.rgbds

def equal = 42
; <- keyword.declaration.def.rgbds
;^^ keyword.declaration.def.rgbds
;   ^^^^^ entity.name.rgbds
;         ^ keyword.operator.assignment.rgbds
;           ^^ constant.numeric.integer.decimal.rgbds

def byte rb 1
; <- keyword.declaration.def.rgbds
;^^ keyword.declaration.def.rgbds
;   ^^^^ entity.name.constant.rgbds
;        ^^ keyword.operator.assignment.rgbds
;           ^ constant.numeric.integer.decimal.rgbds
def word rw 1
; <- keyword.declaration.def.rgbds
;^^ keyword.declaration.def.rgbds
;   ^^^^ entity.name.constant.rgbds
;        ^^ keyword.operator.assignment.rgbds
;           ^ constant.numeric.integer.decimal.rgbds
def long rl 1 ; Not implemented yet
; <- keyword.declaration.def.rgbds
;^^ keyword.declaration.def.rgbds
;   ^^^^ entity.name.constant.rgbds
;        ^^ keyword.operator.assignment.rgbds
;           ^ constant.numeric.integer.decimal.rgbds

def string equs "escape test: \\\"\{\}\n\r\t\0\1\2\3\4\5\6\7\8\9\@\?"
; <- keyword.declaration.def.rgbds
;^^ keyword.declaration.def.rgbds
;   ^^^^^^ entity.name.constant.rgbds
;          ^^^^ keyword.operator.assignment.rgbds
;               ^ punctuation.definition.string.begin.rgbds
;               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                             ^^ constant.character.escape.rgbds
;                               ^^ constant.character.escape.rgbds
;                                 ^^ constant.character.escape.rgbds
;                                   ^^ constant.character.escape.rgbds
;                                     ^^ constant.character.escape.rgbds
;                                       ^^ constant.character.escape.rgbds
;                                         ^^ constant.character.escape.rgbds
;                                           ^^ constant.character.escape.rgbds
;                                             ^^ variable.parameter.rgbds
;                                               ^^ variable.parameter.rgbds
;                                                 ^^ variable.parameter.rgbds
;                                                   ^^ variable.parameter.rgbds
;                                                     ^^ variable.parameter.rgbds
;                                                       ^^ variable.parameter.rgbds
;                                                         ^^ variable.parameter.rgbds
;                                                           ^^ variable.parameter.rgbds
;                                                             ^^ variable.parameter.rgbds
;                                                               ^^ variable.parameter.unique.rgbds
;                                                                 ^ invalid.illegal.rgbds
;                                                                   ^ punctuation.definition.string.end.rgbds

; <- - string - invalid.illegal.rgbds

def str_cat equs strCAT("one ", "two")
;   ^^^^^^^ entity.name.constant.rgbds
;           ^^^^ keyword.operator.assignment.rgbds
;                ^^^^^^^^^^^^^^^^^^^^^ meta.function-call.rgbds
;                                     ^ - meta.function-call.rgbds
;                ^^^^^^ support.function.string.rgbds
;                      ^ punctuation.section.arguments.begin.rgbds
;                       ^^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                       ^ punctuation.definition.string.begin.rgbds
;                            ^ punctuation.definition.string.end.rgbds
;                             ^ punctuation.separator.sequence.rgbds
;                               ^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                               ^ punctuation.definition.string.begin.rgbds
;                                   ^ punctuation.definition.string.end.rgbds
;                                    ^ punctuation.section.arguments.end.rgbds

; Check that consecutive symbol assignments are handled properly (i.e. expressions don't "leak")
def sym1 = 0
; <- keyword.declaration.def.rgbds
def sym2 = sym1
; <- keyword.declaration.def.rgbds
def sym3 = 0
; <- keyword.declaration.def.rgbds


MACRO testMacro

; <- meta.block.macro.rgbds
ENDM

; Make sure that instructions with an optional accumulator don't "leak"
xor a
ld c, a
; <- variable.function.instruction.rgbds
;^ variable.function.instruction.rgbds

add high(af), h
; <- variable.function.instruction.rgbds
;^^ variable.function.instruction.rgbds
add 42
;   ^^ constant.numeric.integer.decimal.rgbds
add a, 64
;      ^^ constant.numeric.integer.decimal.rgbds
ldi [hl], high(af)
;              ^^ keyword.other.register.rgbds
ldd high(af), [hl]
;   ^^^^ support.function.rgbds
;              ^^ keyword.other.register.rgbds

ld LOW(bc), LOW(42)
;           ^^^ support.function.rgbds
;               ^^ constant.numeric.integer.decimal.rgbds
ld high(hl), high(de)
;  ^^^^ support.function.rgbds
;            ^^^^ support.function.rgbds

ld b, DEF(Whack)
;     ^^^ support.function.def.rgbds
;         ^^^^^ meta.generic-name.rgbds

cpl :: cpl a :: cpl HIGH(af) :: cpl b
; <- variable.function.instruction.rgbds
;^^ variable.function.instruction.rgbds
;   ^^ punctuation.separator.sequence.rgbds
;      ^^^ variable.function.instruction.rgbds
;          ^ keyword.other.register.rgbds
;            ^^ punctuation.separator.sequence.rgbds
;               ^^^ variable.function.instruction.rgbds

IF 42

; <- meta.block.if.rgbds
ENDC

IF 42 , whoa
;     ^ invalid.illegal.rgbds
;       ^^^^ invalid.illegal.rgbds
ENDC

def str equs "stronk" 0
;                     ^ invalid.illegal.rgbds

ccf ccf
;   ^^^ invalid.illegal.rgbds

export syma, symb, symc symd
;                       ^^^^ invalid.illegal.rgbds


MACRO mackey

; <- meta.block.macro.rgbds
    shift 64
;   ^^^^^ keyword.operator.assignment.rgbds
;         ^^ constant.numeric.integer.decimal.rgbds

    shift "strings shouldn't end expressions" + 1
;                                             ^ keyword.operator.arithmetic.rgbds
;                                               ^ constant.numeric.integer.decimal.rgbds

    if 0
        shift
; <- meta.block.macro.rgbds meta.block.if.rgbds
;       ^^^^^keyword.operator.assignment.rgbds
    endc
endm

def c#4 equ 0
; <- keyword.declaration.def.rgbds
;^^ keyword.declaration.def.rgbds
;   ^^^ entity.name.constant.rgbds
;       ^^^ keyword.operator.assignment.rgbds keyword.operator.word.rgbds
;           ^ constant.numeric.integer.decimal.rgbds

LOAD "Section name", HRAM[$DABE],BANK[42],ALIGN[8]
; <- keyword.context.block.load.rgbds
;^^^ keyword.context.block.load.rgbds
;    ^ punctuation.definition.string.begin.rgbds
;    ^^^^^^^^^^^^^^ meta.annotation.parameters.section-type.rgbds meta.string.rgbds string.quoted.double.rgbds
;                 ^ punctuation.definition.string.end.rgbds
;                  ^ meta.annotation.parameters.section-type.rgbds punctuation.separator.arguments.rgbds
;                    ^^^^ meta.annotation.parameters.section-type.rgbds storage.type.section.rgbds
;                        ^ punctuation.section.brackets.begin.rgbds
;                         ^^^^^ constant.numeric.integer.hexadecimal.rgbds
;                              ^ punctuation.section.brackets.end.rgbds
;                               ^ punctuation.separator.sequence.rgbds
;                                ^^^^ meta.annotation.parameters.section-attrs.rgbds storage.modifier.rgbds
;                                    ^ punctuation.section.brackets.begin.rgbds
;                                     ^^ constant.numeric.integer.decimal.rgbds
;                                       ^ punctuation.section.brackets.end.rgbds
;                                        ^ punctuation.separator.sequence.rgbds
;                                         ^^^^^ meta.annotation.parameters.section-attrs.rgbds storage.modifier.rgbds
;                                              ^ punctuation.section.brackets.begin.rgbds
;                                               ^ constant.numeric.integer.decimal.rgbds
;                                                ^ punctuation.section.brackets.end.rgbds
ENDL
; <- keyword.context.block.load.end.rgbds
;^^^ keyword.context.block.load.end.rgbds

/* comment
on several lines
*/ even!
; <- comment.block.rgbds punctuation.definition.comment.end.rgbds
;^ comment.block.rgbds punctuation.definition.comment.end.rgbds
; ^^^^^^^ - comment

/* comment
;*/ but not this
; <- comment.block.rgbds
;^^ comment.block.rgbds punctuation.definition.comment.end.rgbds
;  ^^^^^^^^^^^^^^ - comment

; <- - meta.block.macro.rgbds

macro label
; <- meta.block.macro.rgbds meta.function.rgbds keyword.declaration.macro.rgbds
;^^^^ meta.block.macro.rgbds meta.function.rgbds keyword.declaration.macro.rgbds
;     ^^^^^ meta.block.macro.rgbds meta.function.rgbds entity.name.macro.rgbds
endm


PRINT "hi", $BABE
; <- keyword.other.rgbds
;^^^^ keyword.other.rgbds
;     ^^^^ meta.string.rgbds string.quoted.double.rgbds
;     ^ punctuation.definition.string.begin.rgbds
;        ^ punctuation.definition.string.end.rgbds
;         ^ punctuation.separator.sequence.rgbds
;           ^^^^^ constant.numeric.integer.hexadecimal.rgbds
    PRINTLN 0, 1, "two", 3
;   ^^^^^^^ keyword.other.rgbds
;           ^ constant.numeric.integer.decimal.rgbds
;            ^ punctuation.separator.sequence.rgbds
;              ^ constant.numeric.integer.decimal.rgbds
;               ^ punctuation.separator.sequence.rgbds
;                 ^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                 ^ punctuation.definition.string.begin.rgbds
;                     ^ punctuation.definition.string.end.rgbds
;                      ^ punctuation.separator.sequence.rgbds
;                        ^ constant.numeric.integer.decimal.rgbds


    PRINTLN STRCAT("a", "b", "c")
;           ^^^^^^^^^^^^^^^^^^^^^ meta.function-call.rgbds
;           ^^^^^^ support.function.string.rgbds
;                 ^ punctuation.section.arguments.begin.rgbds
;                  ^^^ meta.string.rgbds string.quoted.double.rgbds
;                  ^ punctuation.definition.string.begin.rgbds
;                    ^ punctuation.definition.string.end.rgbds
;                     ^ punctuation.separator.sequence.rgbds
;                       ^^^ meta.string.rgbds string.quoted.double.rgbds
;                       ^ punctuation.definition.string.begin.rgbds
;                         ^ punctuation.definition.string.end.rgbds
;                          ^ punctuation.separator.sequence.rgbds
;                            ^^^ meta.string.rgbds string.quoted.double.rgbds
;                            ^ punctuation.definition.string.begin.rgbds
;                              ^ punctuation.definition.string.end.rgbds
;                               ^ punctuation.section.arguments.end.rgbds

    PRINT STRFMT("How about some", $BEEF, "today?", 0)
;         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.rgbds
;         ^^^^^^ meta.function-call.rgbds support.function.string.rgbds
;               ^ punctuation.section.arguments.begin.rgbds
;                ^^^^^^^^^^^^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                ^ punctuation.definition.string.begin.rgbds
;                               ^ punctuation.definition.string.end.rgbds
;                                ^ punctuation.separator.sequence.rgbds
;                                  ^^^^^ constant.numeric.integer.hexadecimal.rgbds
;                                       ^ punctuation.separator.sequence.rgbds
;                                         ^^^^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                                         ^ punctuation.definition.string.begin.rgbds
;                                                ^ punctuation.definition.string.end.rgbds
;                                                 ^ punctuation.separator.sequence.rgbds
;                                                   ^ constant.numeric.integer.decimal.rgbds
;                                                    ^ punctuation.section.arguments.end.rgbds

    PRINT """Hi
;         ^^^^^^ meta.string.rgbds string.quoted.triple.rgbds
;         ^^^ punctuation.definition.string.begin.rgbds
    guys! \#
; <- meta.string.rgbds string.quoted.triple.rgbds
;^^^^^^^^^^^^ meta.string.rgbds string.quoted.triple.rgbds
;         ^^ variable.parameter.all.rgbds
"""
; <- meta.string.rgbds string.quoted.triple.rgbds punctuation.definition.string.end.rgbds
;^^ meta.string.rgbds string.quoted.triple.rgbds punctuation.definition.string.end.rgbds

    break
;   ^^^^^ keyword.control.flow.break.rgbds


redef saucisse equs "sausage"
; <- keyword.operator.assignment.redef.rgbds
;^^^^ keyword.operator.assignment.redef.rgbds
;     ^^^^^^^^ entity.name.constant.rgbds
;              ^^^^ keyword.operator.assignment.rgbds keyword.operator.word.rgbds
;                   ^^^^^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                   ^ punctuation.definition.string.begin.rgbds
;                           ^ punctuation.definition.string.end.rgbds

load union "...", romX
; <- keyword.context.block.load.rgbds
;^^^ keyword.context.block.load.rgbds
;    ^^^^^ meta.annotation.parameters.section-type.rgbds storage.modifier.section-union.rgbds
;          ^^^^^ meta.annotation.parameters.section-type.rgbds meta.string.rgbds string.quoted.double.rgbds
;          ^ punctuation.definition.string.begin.rgbds
;              ^ punctuation.definition.string.end.rgbds
;               ^ meta.annotation.parameters.section-type.rgbds punctuation.separator.arguments.rgbds
;                 ^^^^ invalid.illegal.rgbds

    ds 1, 2, 3,
;   ^^ keyword.other.data.rgbds
;      ^ constant.numeric.integer.decimal.rgbds
;       ^ punctuation.separator.sequence.rgbds
;         ^ constant.numeric.integer.decimal.rgbds
;          ^ punctuation.separator.sequence.rgbds
;            ^ constant.numeric.integer.decimal.rgbds
;             ^ punctuation.separator.sequence.rgbds


/* \1 */
;  ^^ - variable.parameter.rgbds


    ld a, SomeLabel.localPart
;   ^^ variable.function.instruction.rgbds
;      ^ keyword.other.register.rgbds
;       ^ punctuation.separator.arguments.rgbds
;         ^^^^^^^^^^^^^^^^^^^ meta.generic-name.local.rgbds

    ld a, SomeLabel
;   ^^ variable.function.instruction.rgbds
;      ^ keyword.other.register.rgbds
;       ^ punctuation.separator.arguments.rgbds
;         ^^^^^^^^^ meta.generic-name.rgbds

    ld a, :++
;   ^^ variable.function.instruction.rgbds
;      ^ keyword.other.register.rgbds
;       ^ punctuation.separator.arguments.rgbds
;         ^^^ meta.anon-label-ref.rgbds
    ld a, :-
;   ^^ variable.function.instruction.rgbds
;      ^ keyword.other.register.rgbds
;       ^ punctuation.separator.arguments.rgbds
;         ^^ meta.anon-label-ref.rgbds

    ld a, SIZEOF("Section name")
;   ^^ variable.function.instruction.rgbds
;      ^ keyword.other.register.rgbds
;       ^ punctuation.separator.arguments.rgbds
;         ^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.rgbds
;         ^^^^^^ support.function.bank.rgbds
;               ^ punctuation.section.arguments.begin.rgbds
;                ^^^^^^^^^^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                ^ punctuation.definition.string.begin.rgbds
;                             ^ punctuation.definition.string.end.rgbds
;                              ^ punctuation.section.arguments.end.rgbds

    PRINTLN \<42>
;   ^^^^^^^ keyword.other.rgbds
;           ^^^^^ variable.parameter.rgbds
    PRINTLN \<SYMBOL>
;   ^^^^^^^ keyword.other.rgbds
;           ^^^^^^^^^ variable.parameter.rgbds
    PRINTLN \<
;   ^^^^^^^ keyword.other.rgbds
;           ^^ variable.parameter.rgbds
    PRINTLN \<§!>
;   ^^^^^^^ keyword.other.rgbds
;           ^^ variable.parameter.rgbds

    mac_call a,b(c,d),e
;   ^^^^^^^^^^^^^^^^^^^ meta.function-call.macro.rgbds
;   ^^^^^^^^ variable.function.rgbds
;             ^ punctuation.separator.arguments.rgbds
;                 ^ -punctuation.separator.arguments.rgbds
;                    ^ punctuation.separator.arguments.rgbds

; Check than an unterminated parens does not cause problems
    mac_call a,b(c,d
    mac_call a, b
;   ^^^^^^^^^^^^^ meta.function-call.macro.rgbds
;             ^ punctuation.separator.arguments.rgbds

    DEF sym equs "ayaya"
;   ^^^ keyword.declaration.def.rgbds
;       ^^^ entity.name.constant.rgbds
;           ^^^^ keyword.operator.assignment.rgbds keyword.operator.word.rgbds
;                ^^^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                ^ punctuation.definition.string.begin.rgbds
;                      ^ punctuation.definition.string.end.rgbds

    MACRO lb
;   ^^^^^^^^ meta.block.macro.rgbds meta.function.rgbds
;   ^^^^^ keyword.declaration.macro.rgbds
;         ^^ entity.name.macro.rgbds
        ld \1, (LOW(\2) << 8 | LOW(\3))
;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.macro.rgbds
;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ - invalid.illegal
;          ^^ variable.parameter.rgbds
;                   ^^ variable.parameter.rgbds
;                                  ^^ variable.parameter.rgbds
    ENDM
;^^^^^^^ meta.block.macro.rgbds
;   ^^^^ keyword.declaration.end.macro.rgbds

db "a{d:SYMBOL}b"
;    ^^^^^^^^^^ meta.interpolation.rgbds
;    ^ punctuation.section.interpolation.begin.rgbds
;     ^ constant.other.format-spec.rgbds
;       ^^^^^^ source.rgbds.embedded
;    ^^^^^^^^^^ - string
;             ^ punctuation.section.interpolation.end.rgbds
;   ^ meta.string.rgbds string.quoted.double.rgbds
;              ^ meta.string.rgbds string.quoted.double.rgbds
db {STRING}
;  ^^^^^^^^ meta.interpolation.rgbds
;  ^ punctuation.section.interpolation.begin.rgbds
;   ^^^^^^ source.rgbds.embedded
;         ^ punctuation.section.interpolation.end.rgbds

    mac a,"b,c",d
;           ^ - punctuation.separator.arguments.rgbds

; Line continuations should continue their scope (but I can't get it to work)
    mac a \
        b
;       ^ meta.function-call.macro.rgbds

; Commas take precedence over `b` and `g` parsing, even when incomplete
opt b, g,
;   ^ keyword.other.rgbds
;    ^ punctuation.separator.sequence.rgbds
;      ^ keyword.other.rgbds
;       ^ punctuation.separator.sequence.rgbds

; Macro args in interpolations (string or not) should not override the end of the interpolation
db "{inter\1polation}", 0, 1, 2
;         ^^ variable.parameter.rgbds
;                    ^^^^^^^^^^ - source.rgbds.embedded
{test\1st} blah blah blah
;    ^^ variable.parameter.rgbds
;         ^^^^^^^^^^^^^^^^ - source.rgbds.embedded

; `def` should degrade gracefully with macro args and all
 def
;^^^ keyword.declaration.def.rgbds
 def \ ; ...
 /* ... */ \ ; ...
 line equs "continued"
;     ^^^^ keyword.operator.assignment.rgbds keyword.operator.word.rgbds
 redef
;^^^^^ keyword.operator.assignment.redef.rgbds
 def a\1b equ other
;^^^ keyword.declaration.def.rgbds
;     ^^ variable.parameter.rgbds
;    ^^^^ entity.name.constant.rgbds
;        ^^^^^^^^^^^ - entity.name.constant.rgbds
;         ^^^ keyword.operator.assignment.rgbds keyword.operator.word.rgbds
 def a\1b += other
;^^^ keyword.declaration.def.rgbds
;     ^^ variable.parameter.rgbds
;         ^^ keyword.operator.assignment.rgbds
 def \1 equ thing
;^^^ keyword.declaration.def.rgbds
;    ^^ variable.parameter.rgbds
;       ^^^ keyword.operator.assignment.rgbds keyword.operator.word.rgbds
 def a{strsym}b equ blah
;^^^ keyword.declaration.def.rgbds
;    ^^^^^^^^^^ entity.name.constant.rgbds
;     ^^^^^^^^ meta.interpolation.rgbds
;               ^^^ keyword.operator.assignment.rgbds keyword.operator.word.rgbds

 0abc
;^ invalid.illegal.rgbds


; Line continuations. (Tricky!)

    macro_call a, \
;                 ^ punctuation.separator.continuation.line.rgbds - invalid.illegal.rgbds
    macro_call a, \
               b
; <- meta.function-call.macro.rgbds
;^^^^^^^^^^^^^^^ meta.function-call.macro.rgbds

    macro_call a, \ ; ...
;                 ^ punctuation.separator.continuation.line.rgbds - invalid.illegal.rgbds
;                   ^^^^^ comment.line.semi-colon.rgbds
    macro_call a, \ ; ...
               b
; <- meta.function-call.macro.rgbds
;^^^^^^^^^^^^^^^ meta.function-call.macro.rgbds

    macro_call a, \ /* ... */
;                 ^ punctuation.separator.continuation.line.rgbds - invalid.illegal.rgbds
;                   ^^^^^^^^^ comment.block.rgbds
    macro_call a, \ /* ... */
               b
; <- meta.function-call.macro.rgbds
;^^^^^^^^^^^^^^^ meta.function-call.macro.rgbds

    macro_call a, \ oops
;                 ^ invalid.illegal.rgbds - punctuation.separator.continuation.line.rgbds
    macro_call a, \ oops
               b
; <- - meta.function-call.macro.rgbds
;^^^^^^^^^^^^^^^ - meta.function-call.macro.rgbds

    db "a, \
;          ^ punctuation.separator.continuation.line.rgbds - invalid.illegal.rgbds
    db "a, \
        b
; <- meta.string.rgbds string.quoted.double.rgbds
;^^^^^^^^ meta.string.rgbds string.quoted.double.rgbds

    db "a, \ ; ...
;          ^ punctuation.separator.continuation.line.rgbds - invalid.illegal.rgbds
;            ^^^^^ comment.line.semi-colon.rgbds
    db "a, \ ; ...
        b"
; <- meta.string.rgbds string.quoted.double.rgbds
;^^^^^^^^^ meta.string.rgbds string.quoted.double.rgbds

    db "a, \ /* ... */
;          ^ punctuation.separator.continuation.line.rgbds - invalid.illegal.rgbds
;            ^^^^^^^^^ comment.block.rgbds
    db "a, \ /* ... */
        b"
; <- meta.string.rgbds string.quoted.double.rgbds
;^^^^^^^^^ meta.string.rgbds string.quoted.double.rgbds

    db "a, \ oops
;          ^ - punctuation.separator.continuation.line.rgbds
    db "a, \ oops
        b
; <- - meta.string.rgbds string.quoted.double.rgbds
;^^^^^^^^ - meta.string.rgbds string.quoted.double.rgbds


db 0 
db 1
; <- keyword.other.data.rgbds
;^ keyword.other.data.rgbds
;  ^ constant.numeric.integer.decimal.rgbds

    scf
.label
;<- entity.name.local.rgbds punctuation.accessor.dot.rgbds
;^^^^^ entity.name.local.rgbds

    scf :: ccf
.label
;<- entity.name.local.rgbds punctuation.accessor.dot.rgbds
;^^^^^ entity.name.local.rgbds

    scf :: sbc a
.label
;<- entity.name.local.rgbds punctuation.accessor.dot.rgbds
;^^^^^ entity.name.local.rgbds
    scf :: sbc a, a
.label
;<- entity.name.local.rgbds punctuation.accessor.dot.rgbds
;^^^^^ entity.name.local.rgbds

macro regression_test
    println strcat("\<x>", "test")
;                  ^^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                  ^ punctuation.definition.string.begin.rgbds
;                   ^^^^ variable.parameter.rgbds
;                       ^ punctuation.definition.string.end.rgbds
;                        ^ punctuation.separator.sequence.rgbds
;                          ^^^^^^ meta.string.rgbds string.quoted.double.rgbds
;                          ^ punctuation.definition.string.begin.rgbds
;                               ^ punctuation.definition.string.end.rgbds
endm
